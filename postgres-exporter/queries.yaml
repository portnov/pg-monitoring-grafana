pg_replication:
  query: "SELECT CASE WHEN NOT pg_is_in_recovery() THEN 0 ELSE GREATEST (0, EXTRACT(EPOCH FROM (now() - pg_last_xact_replay_timestamp()))) END AS lag"
  master: true
  metrics:
    - lag:
        usage: "GAUGE"
        description: "Replication lag behind master in seconds"

pg_postmaster:
  query: "SELECT pg_postmaster_start_time as start_time_seconds from pg_postmaster_start_time()"
  master: true
  metrics:
    - start_time_seconds:
        usage: "GAUGE"
        description: "Time at which postmaster started"

pg_stat_user_tables:
  query: |
   SELECT
     current_database() datname,
     schemaname,
     relname,
     seq_scan,
     seq_tup_read,
     idx_scan,
     idx_tup_fetch,
     n_tup_ins,
     n_tup_upd,
     n_tup_del,
     n_tup_hot_upd,
     n_live_tup,
     n_dead_tup,
     n_mod_since_analyze,
     COALESCE(last_vacuum, '1970-01-01Z') as last_vacuum,
     COALESCE(last_autovacuum, '1970-01-01Z') as last_autovacuum,
     COALESCE(last_analyze, '1970-01-01Z') as last_analyze,
     COALESCE(last_autoanalyze, '1970-01-01Z') as last_autoanalyze,
     vacuum_count,
     autovacuum_count,
     analyze_count,
     autoanalyze_count
   FROM
     pg_stat_user_tables
  metrics:
    - datname:
        usage: "LABEL"
        description: "Name of current database"
    - schemaname:
        usage: "LABEL"
        description: "Name of the schema that this table is in"
    - relname:
        usage: "LABEL"
        description: "Name of this table"
    - seq_scan:
        usage: "COUNTER"
        description: "Number of sequential scans initiated on this table"
    - seq_tup_read:
        usage: "COUNTER"
        description: "Number of live rows fetched by sequential scans"
    - idx_scan:
        usage: "COUNTER"
        description: "Number of index scans initiated on this table"
    - idx_tup_fetch:
        usage: "COUNTER"
        description: "Number of live rows fetched by index scans"
    - n_tup_ins:
        usage: "COUNTER"
        description: "Number of rows inserted"
    - n_tup_upd:
        usage: "COUNTER"
        description: "Number of rows updated"
    - n_tup_del:
        usage: "COUNTER"
        description: "Number of rows deleted"
    - n_tup_hot_upd:
        usage: "COUNTER"
        description: "Number of rows HOT updated (i.e., with no separate index update required)"
    - n_live_tup:
        usage: "GAUGE"
        description: "Estimated number of live rows"
    - n_dead_tup:
        usage: "GAUGE"
        description: "Estimated number of dead rows"
    - n_mod_since_analyze:
        usage: "GAUGE"
        description: "Estimated number of rows changed since last analyze"
    - last_vacuum:
        usage: "GAUGE"
        description: "Last time at which this table was manually vacuumed (not counting VACUUM FULL)"
    - last_autovacuum:
        usage: "GAUGE"
        description: "Last time at which this table was vacuumed by the autovacuum daemon"
    - last_analyze:
        usage: "GAUGE"
        description: "Last time at which this table was manually analyzed"
    - last_autoanalyze:
        usage: "GAUGE"
        description: "Last time at which this table was analyzed by the autovacuum daemon"
    - vacuum_count:
        usage: "COUNTER"
        description: "Number of times this table has been manually vacuumed (not counting VACUUM FULL)"
    - autovacuum_count:
        usage: "COUNTER"
        description: "Number of times this table has been vacuumed by the autovacuum daemon"
    - analyze_count:
        usage: "COUNTER"
        description: "Number of times this table has been manually analyzed"
    - autoanalyze_count:
        usage: "COUNTER"
        description: "Number of times this table has been analyzed by the autovacuum daemon"

pg_statio_user_tables:
  query: "SELECT current_database() datname, schemaname, relname, heap_blks_read, heap_blks_hit, idx_blks_read, idx_blks_hit, toast_blks_read, toast_blks_hit, tidx_blks_read, tidx_blks_hit FROM pg_statio_user_tables"
  metrics:
    - datname:
        usage: "LABEL"
        description: "Name of current database"
    - schemaname:
        usage: "LABEL"
        description: "Name of the schema that this table is in"
    - relname:
        usage: "LABEL"
        description: "Name of this table"
    - heap_blks_read:
        usage: "COUNTER"
        description: "Number of disk blocks read from this table"
    - heap_blks_hit:
        usage: "COUNTER"
        description: "Number of buffer hits in this table"
    - idx_blks_read:
        usage: "COUNTER"
        description: "Number of disk blocks read from all indexes on this table"
    - idx_blks_hit:
        usage: "COUNTER"
        description: "Number of buffer hits in all indexes on this table"
    - toast_blks_read:
        usage: "COUNTER"
        description: "Number of disk blocks read from this table's TOAST table (if any)"
    - toast_blks_hit:
        usage: "COUNTER"
        description: "Number of buffer hits in this table's TOAST table (if any)"
    - tidx_blks_read:
        usage: "COUNTER"
        description: "Number of disk blocks read from this table's TOAST table indexes (if any)"
    - tidx_blks_hit:
        usage: "COUNTER"
        description: "Number of buffer hits in this table's TOAST table indexes (if any)"

pg_database:
  query: "SELECT pg_database.datname, pg_database_size(pg_database.datname) as size_bytes FROM pg_database"
  master: true
  cache_seconds: 30
  metrics:
    - datname:
        usage: "LABEL"
        description: "Name of the database"
    - size_bytes:
        usage: "GAUGE"
        description: "Disk space used by the database"

pg_process_idle:
  query: |
    WITH
      metrics AS (
        SELECT
          application_name,
          SUM(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change))::bigint)::float AS process_idle_seconds_sum,
          COUNT(*) AS process_idle_seconds_count
        FROM pg_stat_activity
        WHERE state = 'idle'
        GROUP BY application_name
      ),
      buckets AS (
        SELECT
          application_name,
          le,
          SUM(
            CASE WHEN EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - state_change)) <= le
              THEN 1
              ELSE 0
            END
          )::bigint AS bucket
        FROM
          pg_stat_activity,
          UNNEST(ARRAY[1, 2, 5, 15, 30, 60, 90, 120, 300]) AS le
        GROUP BY application_name, le
        ORDER BY application_name, le
      )
    SELECT
      application_name,
      process_idle_seconds_sum as seconds_sum,
      process_idle_seconds_count as seconds_count,
      ARRAY_AGG(le) AS seconds,
      ARRAY_AGG(bucket) AS seconds_bucket
    FROM metrics JOIN buckets USING (application_name)
    GROUP BY 1, 2, 3
  metrics:
    - application_name:
        usage: "LABEL"
        description: "Application Name"
    - seconds:
        usage: "HISTOGRAM"
        description: "Idle time of server processes"

pg_stat_activity_wait:
  query: |
    SELECT
      datname,
      usename,
      application_name,
      wait_event_type, wait_event,
      COUNT(*) AS total
    FROM pg_stat_activity
    WHERE usename IS NOT NULL AND datname IS NOT NULL
    GROUP BY datname, usename, application_name, wait_event_type, wait_event;

  metrics:
    - usename:
        usage: "LABEL"
        description: "Name of the user logged into this backend"
    - datname:
        usage: "LABEL"
        description: "Name of the database this backend is connected to"
    - application_name:
        usage: "LABEL"
        description: "Name of the application that is connected to this backend"
    - wait_event_type:
        usage: "LABEL"
        description: "The type of event for which the backend is waiting, if any; otherwise NULL"
    - wait_event:
        usage: "LABEL"
        description: "Wait event name if backend is currently waiting, otherwise NULL."
    - total:
        usage: "GAUGE"
        description: "Total number of backends in this state"

pg_stat_wal:
  query: |
    SELECT wal_records, wal_fpi, wal_bytes,
      wal_buffers_full, wal_write, wal_sync,
      wal_write_time, wal_sync_time
    FROM pg_stat_wal

  metrics:
    - wal_records:
        usage: "COUNTER"
        description: "Number of WAL records"
    - wal_fpi:
        usage: "COUNTER"
        description: "Number of WAL FPI pages"
    - wal_bytes:
        usage: "COUNTER"
        description: "Total volume of WAL written"
    - wal_buffers_full:
        usage: "COUNTER"
        description: "WAL_BUFFERS_FULL"
    - wal_write:
        usage: "COUNTER"
        description: "WAL write commands"
    - wal_sync:
        usage: "COUNTER"
        description: "WAL sync commands"
    - wal_write_time:
        usage: "COUNTER"
        description: "WAL write time"
    - wal_sync_time:
        usage: "COUNTER"
        description: "WAL sync time"

pg_wait_sampling_totals:
  query: |
    select event_type || ':' || event as event_name, in_statement, 
      (sum(count) * current_setting('pg_wait_sampling.profile_period')::numeric)/1000 seconds
    from (
      SELECT event_type, event,
        (queryid != 0) as in_statement,
        count
      from pg_wait_sampling_profile
    ) sub
    group by event_type, event, in_statement

  metrics:
    - event_name:
        usage: "LABEL"
        description: "Event type and specific event"
    - in_statement:
        usage: "LABEL"
        description: "Whether the wait event occurs during statement execution"
    - seconds:
        usage: "COUNTER"
        description: "Time spent in specific state"

pg_wait_sampling_profile:
  query: |
    select event_type, event, in_statement, 
      (sum(sub.count) * current_setting('pg_wait_sampling.profile_period')::numeric) / 1000 seconds
    from (
      select p.event_type, p.event, (p.queryid != 0) as in_statement,
        p.count
      from pg_wait_sampling_profile p
    ) sub
    group by event_type, event, in_statement

  metrics:
    - event_type:
        usage: "LABEL"
        description: "Event type"
    - event:
        usage: "LABEL"
        description: "Specific event"
    - in_statement:
        usage: "LABEL"
        description: "Whether the wait event occurs during statement execution"
    - seconds:
        usage: "COUNTER"
        description: "Time spent"

pg_database_freeze:
  query: |
    select d.datname, age(d.datfrozenxid) as age
    from pg_database d

  metrics:
    - datname:
        usage: "LABEL"
        description: "Database name"
    - age:
        usage: "GAUGE"
        description: "Number of transactions since last frozen XID"

pg_stat_kcache:
  query: |
    select k.datname,
      k.plan_user_time, k.plan_system_time,
      k.exec_user_time, k.exec_system_time,
      k.plan_reads, k.plan_writes,
      k.exec_reads, k.exec_writes
    from pg_stat_kcache k
  
  metrics:
    - datname:
        usage: "LABEL"
        description: "Database name"
    - plan_user_time:
        usage: "COUNTER"
        description: "User CPU time spent during query planning"
    - plan_system_time:
        usage: "COUNTER"
        description: "System CPU time spent during query planning"
    - exec_user_time:
        usage: "COUNTER"
        description: "User CPU time spent during query execution"
    - exec_system_time:
        usage: "COUNTER"
        description: "System CPU time spent during query execution"
    - plan_reads:
        usage: "COUNTER"
        description: "Number of bytes read during query planning"
    - plan_writes:
        usage: "COUNTER"
        description: "Number of bytes written during query planning"
    - exec_reads:
        usage: "COUNTER"
        description: "Number of bytes read during query execution"
    - exec_writes:
        usage: "COUNTER"
        description: "Number of bytes written during query execution"

pg_vacuum_settings:
  query: |
    select ns.nspname as schemaname, c.relname, s.name as parameter, coalesce(o.option_value, s.setting) as value
    from pg_class c
    inner join pg_namespace ns on ns.oid = c.relnamespace
    cross join pg_settings s
    left join (
        values
            ('autovacuum_freeze_min_age', 'vacuum_freeze_min_age'),
            ('autovacuum_freeze_table_age', 'vacuum_freeze_max_age')
        ) t (table_name, general_name) on t.general_name = s.name
    left join pg_options_to_table(c.reloptions) o on t.table_name = o.option_name
    where t.table_name in (
        'autovacuum_freeze_min_age',
        'autovacuum_freeze_table_age',
        'autovacuum_freeze_max_age',
        'autovacuum_vacuum_threshold',
        'autovacuum_vacuum_scale_factor',
        'autovacuum_vacuum_insert_threshold',
        'autovacuum_vacuum_insert_scale_factor'
        )
    and c.relkind = 'r'
    and c.relpersistence <> 't'
    and s.name = t.general_name
  cache_seconds: 60
  metrics:
    - schemaname:
        usage: "LABEL"
        description: "Table schema name"
    - relname:
        usage: "LABEL" 
        description: "Name of the table"
    - parameter:
        usage: "LABEL"
        description: "Parameter name"
    - value:
        usage: "GAUGE"
        description: "Parameter value"

pg_class:
  query: |
    select ns.nspname as schemaname, c.relname, age(c.relfrozenxid) as relfrozenxid_age
    from pg_class c
    inner join pg_namespace ns on ns.oid = c.relnamespace
    where c.relkind = 'r'
    and c.relpersistence <> 't'
  cache_seconds: 60
  metrics:
    - schemaname:
        usage: "LABEL"
        description: "Table schema name"
    - relname:
        usage: "LABEL" 
        description: "Name of the table"
    - relfrozenxid_age: 
        usage: "GAUGE"
        description: "Age of last non-frozen tuple in the table"

pg_class_temporary:
  query: |
    select c.relname, max(age(c.relfrozenxid)) as max_relfrozenxid_age
    from pg_class c
    where c.relkind = 'r'
    and c.relpersistence = 't'
    group by c.relname
  cache_seconds: 60
  metrics:
    - relname:
        usage: "LABEL" 
        description: "Name of the table"
    - max_relfrozenxid_age: 
        usage: "GAUGE"
        description: "Maximum age of last non-frozen tuple among all instances of the table"

pg_statement_top_total:
  query: |
    select pg_get_userbyid(s.userid) as role,
      d.datname,
      s.queryid,
      left(btrim(regexp_replace(query, '\s+', ' ')), 100) as query,
      s.total_exec_time as exec_time_ms,
      s.total_plan_time as plan_time_ms
    from pg_stat_statements s
    inner join pg_database d on d.oid = s.dbid
    order by (s.total_exec_time + s.total_plan_time) desc
    limit 100
  metrics:
    - role:
        usage: "LABEL"
        description: "Role that executed the statement"
    - datname:
        usage: "LABEL"
        description: "Database in which the statement was executed"
    - queryid:
        usage: "LABEL"
        description: "Internal hash code, computed from the statement's parse tree"
    - query:
        usage: "LABEL"
        description: "First 100 characters of query text"
    - exec_time_ms:
        usage: "COUNTER"
        description: "Time spent executing the statement, in milliseconds"
    - plan_time_ms:
        usage: "COUNTER"
        description: "Time spent planning the statement, in milliseconds"

pg_statement_top_exec:
  query: |
    select pg_get_userbyid(s.userid) as role,
      d.datname,
      s.queryid,
      left(btrim(regexp_replace(query, '\s+', ' ')), 100) as query,
      s.plans as plans_total,
      s.calls as execs_total
    from pg_stat_statements s
    inner join pg_database d on d.oid = s.dbid
    order by (s.plans + s.calls) desc
    limit 100
  metrics:
    - role:
        usage: "LABEL"
        description: "Role that executed the statement"
    - datname:
        usage: "LABEL"
        description: "Database in which the statement was executed"
    - queryid:
        usage: "LABEL"
        description: "Internal hash code, computed from the statement's parse tree"
    - query:
        usage: "LABEL"
        description: "First 100 characters of query text"
    - plans_total:
        usage: "COUNTER"
        description: "Number of statement plannings"
    - execs_total:
        usage: "COUNTER"
        description: "Number of statement executions"
